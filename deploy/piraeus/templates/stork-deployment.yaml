---
# Source: piraeus/templates/stork-deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stork-account
  namespace: default
---
# Source: piraeus/templates/stork-deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stork-scheduler-account
  namespace: default
---
# Source: piraeus/templates/stork-deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: piraeus-op-stork-config
  namespace: default
data:
  # The default list of predicates and priorities can change depending on your version
  # of Kubernetes, so please update those as required. The requirement to manually specify this
  # list will go away with Kubernetes v1.10 where it will use the defaults if nothing is
  # specified.
  policy.cfg: |-
    {
      "kind": "Policy",
      "apiVersion": "v1",
      "extenders": [
        {
          "urlPrefix": "http://piraeus-op-stork-service.default.svc.cluster.local:8099",
          "apiVersion": "v1beta1",
          "filterVerb": "filter",
          "prioritizeVerb": "prioritize",
          "weight": 5,
          "enableHttps": false,
          "nodeCacheCapable": false
        }
      ]
    }
---
# Source: piraeus/templates/stork-deployment.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: stork-role
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
---
# Source: piraeus/templates/stork-deployment.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: stork-scheduler-role
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "update"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["events.k8s.io"]
    resources: ["events"]
    verbs: ["create", "patch", "update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch", "update"]
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["create"]
  - apiGroups: [""]
    resourceNames: ["kube-scheduler"]
    resources: ["endpoints"]
    verbs: ["delete", "get", "patch", "update"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["delete", "get", "list", "watch"]
  - apiGroups: [""]
    resources: ["bindings", "pods/binding"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["pods/status"]
    verbs: ["patch", "update"]
  - apiGroups: [""]
    resources: ["replicationcontrollers", "services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["*"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["statefulsets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims", "persistentvolumes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses", "csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
---
# Source: piraeus/templates/stork-deployment.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: stork-role-binding
subjects:
  - kind: ServiceAccount
    name: stork-account
    namespace: default
roleRef:
  kind: ClusterRole
  name: stork-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: piraeus/templates/stork-deployment.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: stork-scheduler-role-binding
subjects:
  - kind: ServiceAccount
    name: stork-scheduler-account
    namespace: default
roleRef:
  kind: ClusterRole
  name: stork-scheduler-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: piraeus/templates/stork-deployment.yaml
kind: Service
apiVersion: v1
metadata:
  name: piraeus-op-stork-service
  namespace: default
spec:
  selector:
    name: stork
    release: piraeus-op
  ports:
    - name: extender
      protocol: TCP
      port: 8099
      targetPort: 8099
    - name: webhook
      protocol: TCP
      port: 443
      targetPort: 443
---
# Source: piraeus/templates/stork-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ""
  labels:
    tier: control-plane
  name: piraeus-op-stork
  namespace: default
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      name: stork
  replicas: 1
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        name: stork
        release: piraeus-op
        tier: control-plane
    spec:
      containers:
        - command:
            - /stork
            - --driver=linstor
            - --verbose
            - --leader-elect=true
            - --snapshotter=false
            - --cluster-domain-controllers=false
          imagePullPolicy: "IfNotPresent"
          image: docker.io/linbit/stork:latest
          ports:
            - containerPort: 8099
              name: extender
              protocol: TCP
            - containerPort: 443
              name: webhook
              protocol: TCP
          resources:
            {}
          securityContext:
            privileged: false
          name: stork
          env:
            - name: LS_CONTROLLERS
              value: http://piraeus-op-cs.default.svc:3370
      hostPID: false
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "name"
                    operator: In
                    values:
                      - stork
              topologyKey: "kubernetes.io/hostname"
      serviceAccountName: stork-account
# Source: https://raw.githubusercontent.com/libopenstorage/stork/v2.4.1/specs/stork-scheduler.yaml
---
# Source: piraeus/templates/stork-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: scheduler
    tier: control-plane
  name: piraeus-op-stork-scheduler
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      name: piraeus-op-stork-scheduler
  template:
    metadata:
      labels:
        component: scheduler
        tier: control-plane
        name: piraeus-op-stork-scheduler
      name: piraeus-op-stork-scheduler
    spec:
      containers:
        - command:
            - /usr/local/bin/kube-scheduler
            - --address=0.0.0.0
            - --leader-elect=true
            - --scheduler-name=stork
            - --policy-configmap=piraeus-op-stork-config
            - --policy-configmap-namespace=default
            - --leader-elect-resource-name=piraeus-op-stork-scheduler
            - --leader-elect-resource-namespace=default
          image: "gcr.io/google_containers/kube-scheduler-amd64:v1.16.0"
          imagePullPolicy: "IfNotPresent"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10251
            initialDelaySeconds: 15
          name: piraeus-op-stork-scheduler
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10251
          resources:
            {}
          securityContext:
            privileged: false
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "name"
                    operator: In
                    values:
                      - piraeus-op-stork-scheduler
              topologyKey: "kubernetes.io/hostname"
      hostPID: false
      serviceAccountName: stork-scheduler-account
---
# Source: piraeus/templates/stork-deployment.yaml
# Source: https://raw.githubusercontent.com/libopenstorage/stork/v2.4.1/specs/stork-deployment.yaml
