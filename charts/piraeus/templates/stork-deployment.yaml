{{- if .Values.stork.enabled }}
# Source: https://github.com/libopenstorage/stork/blob/v2.8.2/specs/stork-deployment.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-stork-config
  namespace: {{ .Release.Namespace }}
data:
  # The default list of predicates and priorities can change depending on your version
  # of Kubernetes, so please update those as required. The requirement to manually specify this
  # list will go away with Kubernetes v1.10 where it will use the defaults if nothing is
  # specified.
  {{- if semverCompare ">= 1.22" .Capabilities.KubeVersion.Version }}
  stork-config.yaml: |-
    {{- if semverCompare ">= 1.23" .Capabilities.KubeVersion.Version }}
    apiVersion: kubescheduler.config.k8s.io/v1beta3
    {{- else }}
    apiVersion: kubescheduler.config.k8s.io/v1beta2
    {{- end }}
    kind: KubeSchedulerConfiguration
    leaderElection:
      leaderElect: true
      leaseDuration: 15s
      renewDeadline: 10s
      retryPeriod: 2s
      resourceLock: leases
      resourceNamespace: {{ .Release.Namespace }}
      resourceName: {{ .Release.Name }}-stork-scheduler
    profiles:
      - schedulerName: stork
    extenders:
      - urlPrefix: http://{{ .Release.Name }}-stork-service.{{ .Release.Namespace }}:8099
        filterVerb: filter
        prioritizeVerb: prioritize
        weight: 5
        enableHTTPS: false
        httpTimeout: 300000s
        nodeCacheCapable: false
  {{- else }}
  policy.cfg: |-
    {
      "kind": "Policy",
      "apiVersion": "v1",
      "extenders": [
        {
          "urlPrefix": "http://{{ .Release.Name }}-stork-service.{{ .Release.Namespace }}.svc.cluster.local:8099",
          "apiVersion": "v1beta1",
          "filterVerb": "filter",
          "prioritizeVerb": "prioritize",
          "weight": 5,
          "enableHttps": false,
          "nodeCacheCapable": false
        }
      ]
    }
  {{- end }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stork-account
  namespace: {{ .Release.Namespace }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: stork-role
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: stork-role-binding
subjects:
  - kind: ServiceAccount
    name: stork-account
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: stork-role
  apiGroup: rbac.authorization.k8s.io
---
kind: Service
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-stork-service
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    name: stork
    release: {{ .Release.Name }}
  ports:
    - name: extender
      protocol: TCP
      port: 8099
      targetPort: 8099
    - name: webhook
      protocol: TCP
      port: 443
      targetPort: 443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ""
  labels:
    tier: control-plane
  name: {{ .Release.Name }}-stork
  namespace: {{ .Release.Namespace }}
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      name: stork
  replicas: {{ .Values.stork.replicas }}
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        name: stork
        release: {{ .Release.Name }}
        tier: control-plane
    spec:
      containers:
        - command:
            - /stork
            - --driver=linstor
            - --verbose
            - --leader-elect=true
            - --snapshotter=false
            - --cluster-domain-controllers=false
            - --health-monitor=false
          imagePullPolicy: {{ .Values.global.imagePullPolicy | quote }}
          image: {{ .Values.stork.storkImage }}
          ports:
            - containerPort: 8099
              name: extender
              protocol: TCP
            - containerPort: 443
              name: webhook
              protocol: TCP
          resources:
{{ .Values.stork.storkResources | toYaml | indent 12}}
          name: stork
          env:
{{ include "linstor-env" . | indent 12 }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "name"
                    operator: In
                    values:
                      - stork
              topologyKey: "kubernetes.io/hostname"
      serviceAccountName: stork-account
      securityContext:
{{- if .Values.stork.podsecuritycontext }}
{{ .Values.stork.podsecuritycontext | toYaml | indent 8 }}
{{- else }}
{{ include "operator.defaultpodsecuritycontext" $ | indent 8 }}
{{- end }}
# Source: https://github.com/libopenstorage/stork/blob/v2.8.2/specs/stork-scheduler.yaml
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stork-scheduler-account
  namespace: {{ .Release.Namespace }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: stork-scheduler-role
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "update"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch", "update"]
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["create"]
  - apiGroups: [""]
    resourceNames: ["kube-scheduler"]
    resources: ["endpoints"]
    verbs: ["delete", "get", "patch", "update"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods", "namespaces"]
    verbs: ["delete", "get", "list", "watch"]
  - apiGroups: [""]
    resources: ["bindings", "pods/binding"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["pods/status"]
    verbs: ["patch", "update"]
  - apiGroups: [""]
    resources: ["replicationcontrollers", "services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["*"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["statefulsets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims", "persistentvolumes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses", "csinodes","csidrivers", "csistoragecapacities"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "update", "create"]
  - apiGroups: ["events.k8s.io"]
    resources: ["events"]
    verbs: ["create"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: stork-scheduler-role-binding
subjects:
  - kind: ServiceAccount
    name: stork-scheduler-account
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: stork-scheduler-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: scheduler
    tier: control-plane
  name: {{ .Release.Name }}-stork-scheduler
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.stork.replicas }}
  selector:
    matchLabels:
      name: {{ .Release.Name }}-stork-scheduler
  template:
    metadata:
      labels:
        component: scheduler
        tier: control-plane
        name: {{ .Release.Name }}-stork-scheduler
      name: {{ .Release.Name }}-stork-scheduler
    spec:
      containers:
        - command:
            - /usr/local/bin/kube-scheduler
            - --address=0.0.0.0
            {{- if semverCompare ">= 1.22" .Capabilities.KubeVersion.Version }}
            - --config=/etc/kubernetes/stork-config.yaml
            {{- else }}
            - --leader-elect=true
            - --scheduler-name=stork
            - --policy-configmap={{ .Release.Name }}-stork-config
            - --policy-configmap-namespace={{ .Release.Namespace }}
            - --leader-elect-resource-name={{ .Release.Name }}-stork-scheduler
            - --leader-elect-resource-namespace={{ .Release.Namespace }}
            {{- end }}
          image: "{{ .Values.stork.schedulerImage }}:{{ .Values.stork.schedulerTag | default .Capabilities.KubeVersion.Version }}"
          imagePullPolicy: {{ .Values.global.imagePullPolicy | quote }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10251
            initialDelaySeconds: 15
          name: {{ .Release.Name }}-stork-scheduler
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10251
          {{- if semverCompare ">= 1.22" .Capabilities.KubeVersion.Version }}
          volumeMounts:
          - mountPath: /etc/kubernetes
            name: stork-config
          {{- end }}
          resources:
{{ .Values.stork.schedulerResources | toYaml | indent 12}}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "name"
                    operator: In
                    values:
                      - {{ .Release.Name }}-stork-scheduler
              topologyKey: "kubernetes.io/hostname"
      hostPID: false
      securityContext:
{{- if .Values.stork.podsecuritycontext }}
{{ .Values.stork.podsecuritycontext | toYaml | indent 8 }}
{{- else }}
{{ include "operator.defaultpodsecuritycontext" $ | indent 8 }}
{{- end }}
      serviceAccountName: stork-scheduler-account
      {{- if semverCompare ">= 1.22" .Capabilities.KubeVersion.Version }}
      volumes:
      - configMap:
          defaultMode: 420
          name: {{ .Release.Name }}-stork-config
        name: stork-config
      {{- end }}
{{- end }}
