IHaveBackedUpAllMyLinstorResources: false
global:
  imagePullPolicy: IfNotPresent # empty pull policy means k8s default is used ("always" if tag == ":latest", "ifnotpresent" else)
  setSecurityContext: true # Force non-privileged containers to run as non-root users
# Dependency charts
etcd:
  enabled: true
  persistentVolume:
    enabled: true
    storage: 1Gi
  replicas: 1 # How many instances of etcd will be added to the initial cluster.
  resources: {} # resource requirements for etcd containers
  image:
    repository: gcr.io/etcd-development/etcd
    tag: v3.4.15
scheduler:
  enabled: true
  extenderImage: quay.io/piraeusdatastore/linstor-scheduler-extender:v0.2.0
  image: k8s.gcr.io/kube-scheduler-amd64
  replicas: 1
  resources: {} # resources requirements for the linstor-scheduler-extender containers
  extenderResources: {} # resource requirements for the kube-scheduler containers
  podsecuritycontext: {}
csi:
  enabled: true
  pluginImage: quay.io/piraeusdatastore/piraeus-csi:v0.18.0
  csiAttacherImage: k8s.gcr.io/sig-storage/csi-attacher:v3.4.0
  csiLivenessProbeImage: k8s.gcr.io/sig-storage/livenessprobe:v2.5.0
  csiNodeDriverRegistrarImage: k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.4.0
  csiProvisionerImage: k8s.gcr.io/sig-storage/csi-provisioner:v3.1.0
  csiSnapshotterImage: k8s.gcr.io/sig-storage/csi-snapshotter:v5.0.1
  csiResizerImage: k8s.gcr.io/sig-storage/csi-resizer:v1.4.0
  csiAttacherWorkerThreads: 10
  csiProvisionerWorkerThreads: 10
  csiSnapshotterWorkerThreads: 10
  csiResizerWorkerThreads: 10
  controllerReplicas: 1
  nodeAffinity: {}
  nodeTolerations: []
  controllerAffinity: {}
  controllerTolerations: []
  enableTopology: true
  resources: {}
  kubeletPath: /var/lib/kubelet
priorityClassName: ""
drbdRepoCred: "" # <- Specify the kubernetes secret name here
linstorSslMethod: "manual" # <- If set to 'helm' or 'cert-manager' the certificates will be generated automatically
linstorHttpsMethod: "manual" # <- If set to 'helm' or 'cert-manager' the certificates will be generated automatically
linstorHttpsControllerSecret: "" # <- name of secret containing linstor server certificates+key. See docs/security.md
linstorHttpsClientSecret: "" # <- name of secret containing linstor client certificates+key. See docs/security.md
controllerEndpoint: "" # <- override to the generated controller endpoint. use if controller is not deployed via operator
psp:
  privilegedRole: ""
  unprivilegedRole: ""
operator:
  replicas: 1 # <- number of replicas for the operator deployment
  image: quay.io/piraeusdatastore/piraeus-operator:latest
  affinity: {}
  tolerations: []
  resources: {}
  podsecuritycontext: {}
  controller:
    enabled: true
    controllerImage: quay.io/piraeusdatastore/piraeus-server:v1.18.0-rc.3
    dbConnectionURL: ""
    luksSecret: ""
    dbCertSecret: ""
    dbUseClientCert: false
    sslSecret: ""
    affinity: {}
    tolerations:
      - key: node-role.kubernetes.io/master
        operator: "Exists"
        effect: "NoSchedule"
    resources: {}
    replicas: 1
    additionalEnv: []
    additionalProperties: {}
  satelliteSet:
    enabled: true
    satelliteImage: quay.io/piraeusdatastore/piraeus-server:v1.18.0-rc.3
    storagePools: {}
    sslSecret: ""
    automaticStorageType: None
    affinity: {}
    tolerations: []
    resources: {}
    monitoringImage: quay.io/piraeusdatastore/drbd-reactor:v0.5.3
    kernelModuleInjectionImage: quay.io/piraeusdatastore/drbd9-bionic:v9.1.6
    kernelModuleInjectionMode: Compile
    kernelModuleInjectionAdditionalSourceDirectory: ""
    kernelModuleInjectionResources: {}
    additionalEnv: []
haController:
  enabled: true
  image: quay.io/piraeusdatastore/piraeus-ha-controller:v0.3.0
  affinity: {}
  tolerations: []
  resources: {}
  replicas: 1
