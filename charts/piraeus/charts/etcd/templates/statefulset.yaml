{{- $etcdPeerProtocol := include "etcd.peerProtocol" . }}
{{- $etcdClientProtocol := include "etcd.clientProtocol" . }}
{{- $etcdAuthOptions := include "etcd.authOptions" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "etcd.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app: {{ template "etcd.name" . }}
    app.kubernetes.io/name: {{ template "etcd.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: {{ template "etcd.name" . }}
      #app.kubernetes.io/instance: {{ .Release.Name }}
  serviceName: {{ template "etcd.fullname" . }}
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      name: {{ template "etcd.fullname" . }}
      labels:
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        app: {{ template "etcd.name" . }}
    spec:
      serviceAccountName: "etcd"
{{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
{{- end }}
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{ else }}
      affinity:
        # Ensures only one pod is scheduled per node
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: {{ template "etcd.name" . }}
              topologyKey: "kubernetes.io/hostname"
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
      securityContext:
{{- if .Values.podsecuritycontext }}
{{ toYaml .Values.podsecuritycontext | indent 8 }}
{{- else }}
{{ include "operator.defaultpodsecuritycontext" $ | indent 8 }}
{{- end }}
      containers:
      - name: {{ template "etcd.fullname" . }}
        securityContext:
          capabilities:
            add: ["NET_RAW"]
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy | quote }}
        ports:
        - containerPort: {{ .Values.peerPort }}
          name: peer
        - containerPort: {{ .Values.clientPort }}
          name: client
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: INITIAL_CLUSTER_SIZE
          value: {{ .Values.replicas | quote }}
        - name: SET_NAME
          value: {{ template "etcd.fullname" . }}
        {{- if and .Values.auth.peer.secureTransport }}
        - name: ETCD_PEER_CERT_FILE
          value: "/opt/etcd/certs/peer/tls.crt"
        - name: ETCD_PEER_KEY_FILE
          value: "/opt/etcd/certs/peer/tls.key"
        {{- if .Values.auth.peer.enableAuthentication }}
        - name: ETCD_PEER_CLIENT_CERT_AUTH
          value: "true"
        - name: ETCD_PEER_TRUSTED_CA_FILE
          value: "/opt/etcd/certs/peer/ca.crt"
        {{- end }}
        {{- end }}
        {{- if .Values.auth.client.secureTransport }}
        - name: ETCD_CERT_FILE
          value: "/opt/etcd/certs/client/tls.crt"
        - name: ETCD_KEY_FILE
          value: "/opt/etcd/certs/client/tls.key"
        {{- if .Values.auth.client.enableAuthentication }}
        - name: ETCD_CLIENT_CERT_AUTH
          value: "true"
        - name: ETCD_TRUSTED_CA_FILE
          value: "/opt/etcd/certs/client/ca.crt"
        {{- end }}
        {{- end }}
{{- if .Values.extraEnv }}
{{ toYaml .Values.extraEnv | indent 8 }}
{{- end }}
        volumeMounts:
        - name: datadir
          mountPath: /var/run/etcd
        {{- if .Values.auth.client.secureTransport }}
        - name: etcd-client-certs
          mountPath: /opt/etcd/certs/client/
          readOnly: true
        {{- end }}
        {{- if .Values.auth.peer.secureTransport }}
        - name: etcd-peer-certs
          mountPath: /opt/etcd/certs/peer/
          readOnly: true
        {{- end }}
        lifecycle:
          preStop:
            exec:
              command:
                - "/bin/sh"
                - "-ec"
                - |
                  EPS=""
                  for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                      EPS="${EPS}${EPS:+,}{{ $etcdPeerProtocol }}://${SET_NAME}-${i}.${SET_NAME}:2379"
                  done

                  HOSTNAME=$(hostname)
                  AUTH_OPTIONS="{{ $etcdAuthOptions }}"

                  member_hash() {
                      etcdctl $AUTH_OPTIONS member list | grep {{ $etcdPeerProtocol }}://${HOSTNAME}.${SET_NAME}:2380 | cut -d ',' -f1
                  }

                  SET_ID=${HOSTNAME##*[^0-9]}

                  if [ "${SET_ID}" -ge ${INITIAL_CLUSTER_SIZE} ]; then
                      echo "Removing ${HOSTNAME} from etcd cluster"
                      ETCDCTL_ENDPOINT=${EPS} etcdctl $AUTH_OPTIONS member remove $(member_hash)
                      if [ $? -eq 0 ]; then
                          # Remove everything otherwise the cluster will no longer scale-up
                          rm -rf /var/run/etcd/*
                      fi
                  fi
        command:
          - "/bin/sh"
          - "-ec"
          - |
            HOSTNAME=$(hostname)
            AUTH_OPTIONS="{{ $etcdAuthOptions }}"
            # store member id into PVC for later member replacement
            collect_member() {
                while ! etcdctl $AUTH_OPTIONS member list > /dev/null 2>&1; do sleep 1; done
                etcdctl $AUTH_OPTIONS member list | grep "{{ $etcdPeerProtocol }}://${HOSTNAME}.${SET_NAME}:2380" | cut -d ',' -f1 > /var/run/etcd/member_id
                exit 0
            }

            eps() {
                EPS=""
                for i in $(seq 0 $((INITIAL_CLUSTER_SIZE - 1))); do
                    EPS="${EPS}${EPS:+,}{{ $etcdPeerProtocol }}://${SET_NAME}-${i}.${SET_NAME}:2379"
                done
                echo "${EPS}"
            }

            member_hash() {
                etcdctl $AUTH_OPTIONS member list | grep "{{ $etcdPeerProtocol }}://${HOSTNAME}.${SET_NAME}:2380" | cut -d ',' -f1
            }

            # In case of disaster recovery, we want to be able to intervene in the normal startup process
            while [ -e /var/run/etcd/nostart ]; do
                echo "'/var/run/etcd/nostart' present, delaying startup"
                sleep 5
            done

            # we should wait for other pods to be up before trying to join
            # otherwise we got "no such host" errors when trying to resolve other members
            for i in $(seq 0 $((INITIAL_CLUSTER_SIZE - 1))); do
                while true; do
                    echo "Waiting for ${SET_NAME}-${i}.${SET_NAME} to come up"
                    ping -W 1 -c 1 "${SET_NAME}-${i}.${SET_NAME}" > /dev/null && break
                    sleep 1s
                done
            done

            # we should also wait for our own pod to be available in the cluster
            while true; do
                echo "Waiting for ${HOSTNAME}.${SET_NAME} to come up"
                ping -W 1 -c 1 "${HOSTNAME}.${SET_NAME}" > /dev/null && break
                sleep 1s
            done

            # re-joining after failure?
            if [ -e /var/run/etcd/default.etcd ] && [ -e /var/run/etcd/member_id ]; then
                echo "Re-joining etcd member"
                member_id=$(cat /var/run/etcd/member_id)

                # re-join member
                ETCDCTL_ENDPOINTS=$(eps) etcdctl $AUTH_OPTIONS member update "${member_id}" "--peer-urls={{ $etcdPeerProtocol }}://${HOSTNAME}.${SET_NAME}:2380" || true
                exec etcd --name "${HOSTNAME}" \
                    --listen-peer-urls "{{ $etcdPeerProtocol }}://0.0.0.0:2380" \
                    --listen-client-urls "{{ $etcdClientProtocol }}://0.0.0.0:2379" \
                    --advertise-client-urls "{{ $etcdClientProtocol }}://${HOSTNAME}.${SET_NAME}:2379" \
                    --data-dir /var/run/etcd/default.etcd
            fi

            # etcd-SET_ID
            SET_ID=${HOSTNAME##*[^0-9]}

            # adding a new member to existing cluster (assuming all initial pods are available)
            if [ "${SET_ID}" -ge "${INITIAL_CLUSTER_SIZE}" ]; then
                ETCDCTL_ENDPOINTS=$(eps)
                export ETCDCTL_ENDPOINTS
                # member already added?
                MEMBER_HASH=$(member_hash)
                if [ -n "${MEMBER_HASH}" ]; then
                    # the member hash exists but for some reason etcd failed
                    # as the datadir has not be created, we can remove the member
                    # and retrieve new hash
                    etcdctl $AUTH_OPTIONS member remove "${MEMBER_HASH}"
                fi

                echo "Adding new member"

                if ! etcdctl $AUTH_OPTIONS member add "${HOSTNAME}" "--peer-urls={{ $etcdPeerProtocol }}://${HOSTNAME}.${SET_NAME}:2380" | grep "^ETCD_" > /var/run/etcd/new_member_envs ; then
                    echo "Exiting"
                    rm -f /var/run/etcd/new_member_envs
                    exit 1
                fi

                cat /var/run/etcd/new_member_envs
                # shellcheck disable=SC1091
                . /var/run/etcd/new_member_envs

                collect_member &

                exec etcd --name "${HOSTNAME}" \
                    --listen-peer-urls "{{ $etcdPeerProtocol }}://0.0.0.0:2380" \
                    --listen-client-urls "{{ $etcdClientProtocol }}://0.0.0.0:2379" \
                    --advertise-client-urls "{{ $etcdClientProtocol }}://${HOSTNAME}.${SET_NAME}:2379" \
                    --data-dir /var/run/etcd/default.etcd \
                    --initial-advertise-peer-urls "{{ $etcdPeerProtocol }}://${HOSTNAME}.${SET_NAME}:2380" \
                    --initial-cluster "${ETCD_INITIAL_CLUSTER}" \
                    --initial-cluster-state "${ETCD_INITIAL_CLUSTER_STATE}"

            fi

            PEERS=""
            for i in $(seq 0 $((INITIAL_CLUSTER_SIZE - 1))); do
                PEERS="${PEERS}${PEERS:+,}${SET_NAME}-${i}={{ $etcdPeerProtocol }}://${SET_NAME}-${i}.${SET_NAME}:2380"
            done

            collect_member &

            # join member
            exec etcd --name "${HOSTNAME}" \
                --initial-advertise-peer-urls "{{ $etcdPeerProtocol }}://${HOSTNAME}.${SET_NAME}:2380" \
                --listen-peer-urls "{{ $etcdPeerProtocol }}://0.0.0.0:2380" \
                --listen-client-urls "{{ $etcdClientProtocol }}://0.0.0.0:2379" \
                --advertise-client-urls "{{ $etcdClientProtocol }}://${HOSTNAME}.${SET_NAME}:2379" \
                --initial-cluster-token etcd-cluster-1 \
                --initial-cluster "${PEERS}" \
                --initial-cluster-state new \
                --data-dir /var/run/etcd/default.etcd
      volumes:
      {{- if .Values.auth.client.secureTransport }}
      - name: etcd-client-certs
        secret:
          secretName: {{ required "A secret containinig the client certificates is required" .Values.auth.client.existingSecret }}
          defaultMode: 256
      {{- end }}
      {{- if .Values.auth.peer.secureTransport }}
      - name: etcd-peer-certs
        secret:
          secretName: {{ required "A secret containinig the peer certificates is required" .Values.auth.peer.existingSecret }}
          defaultMode: 256
      {{- end }}
      {{- if not .Values.persistentVolume.enabled }}
      {{- if .Values.memoryMode }}
      - name: datadir
        emptyDir:
          medium: Memory
      {{- else }}
      - name: datadir
        emptyDir: {}
      {{- end }}
      {{- end}}
  {{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          # upstream recommended max is 700M
          storage: "{{ .Values.persistentVolume.storage }}"
    {{- if .Values.persistentVolume.storageClass }}
    {{- if (eq "-" .Values.persistentVolume.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.persistentVolume.storageClass }}"
    {{- end }}
    {{- end }}
  {{- end }}
